#!/usr/bin/env php
<?php

require_once __DIR__ . "/vendor/autoload.php";

use Ahc\Cli\Input\Command;
use cebe\openapi\spec\Info;
use cebe\openapi\spec\MediaType;
use cebe\openapi\spec\OpenApi;
use cebe\openapi\spec\Operation;
use cebe\openapi\spec\Parameter;
use cebe\openapi\spec\PathItem;
use cebe\openapi\spec\Response;
use cebe\openapi\spec\Schema;
use cebe\openapi\spec\SecurityRequirement;
use cebe\openapi\Writer;
use PhpParser\Node\Expr;
use PhpParser\Node\Expr\Array_;
use PhpParser\Node\Expr\ArrayItem;
use PhpParser\Node\Expr\ConstFetch;
use PhpParser\Node\Expr\New_;
use PhpParser\Node\Expr\UnaryMinus;
use PhpParser\Node\Identifier;
use PhpParser\Node\IntersectionType;
use PhpParser\Node\Name;
use PhpParser\Node\NullableType;
use PhpParser\Node\Param;
use PhpParser\Node\Scalar\LNumber;
use PhpParser\Node\Scalar\String_;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\ClassMethod;
use PhpParser\Node\Stmt\Return_;
use PhpParser\Node\Stmt\Throw_;
use PhpParser\Node\UnionType;
use PhpParser\NodeAbstract;
use PhpParser\NodeFinder;
use PhpParser\ParserFactory;
use PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprStringNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasTagValueNode;
use PHPStan\PhpDocParser\Ast\Type\ArrayShapeNode;
use PHPStan\PhpDocParser\Ast\Type\ArrayTypeNode;
use PHPStan\PhpDocParser\Ast\Type\ConstTypeNode;
use PHPStan\PhpDocParser\Ast\Type\GenericTypeNode;
use PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode;
use PHPStan\PhpDocParser\Ast\Type\IntersectionTypeNode;
use PHPStan\PhpDocParser\Ast\Type\NullableTypeNode;
use PHPStan\PhpDocParser\Ast\Type\TypeNode;
use PHPStan\PhpDocParser\Ast\Type\UnionTypeNode;
use PHPStan\PhpDocParser\Lexer\Lexer;
use PHPStan\PhpDocParser\Parser\ConstExprParser;
use PHPStan\PhpDocParser\Parser\PhpDocParser;
use PHPStan\PhpDocParser\Parser\TokenIterator;
use PHPStan\PhpDocParser\Parser\TypeParser;

$responseTypePrefixes = ["JSON", "Data", "FileDisplay"];
$responseTypes = [];
foreach ($responseTypePrefixes as $responseTypePrefix) {
	$responseTypes[] = $responseTypePrefix . "Response";
}

$command = new Command("openapi-extractor", "Extract OpenAPI specs from the Nextcloud source code");
$command
	->arguments("dir out")
	->option('--first-response', 'Only output the first response')
	->parse($_SERVER["argv"]);

$dir = $command->dir;
$out = $command->out;
$firstResponse = $command->firstResponse ?? false;

if ($dir == "") {
	$dir = ".";
}
if ($out == "") {
	$out = "openapi.json";
}

$astParser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
$nodeFinder = new NodeFinder;

$lexer = new Lexer();
$constExprParser = new ConstExprParser();
$typeParser = new TypeParser($constExprParser);
$phpDocParser = new PhpDocParser($typeParser, $constExprParser);

$infoXMLPath = join("/", [$dir, "appinfo", "info.xml"]);

if (file_exists($infoXMLPath)) {
	$xml = simplexml_load_file($infoXMLPath) or die("Unable to read or parse " . $infoXMLPath . "\n");

	$appIsCore = false;
	$appID = (string)$xml->id;
	$appName = (string)$xml->name;
	$appSummary = (string)$xml->summary;
	$appVersion = (string)$xml->version;
	$appLicence = (string)$xml->licence;
} else {
	$versionPHPPath = join("/", [$dir, "..", "version.php"]);

	if (!file_exists($versionPHPPath)) {
		die("Neither " . $infoXMLPath . " nor " . $versionPHPPath . " exists\n");
	}

	// Includes https://github.com/nextcloud/server/blob/master/version.php when running inside https://github.com/nextcloud/server/tree/master/core
	include(join("/", [$dir, "..", "version.php"]));
	if (!isset($OC_VersionString)) {
		die("Unable to figure out core version\n");
	}

	$appIsCore = true;
	$appID = "core";
	$appName = "Core";
	$appSummary = "Core functionality of Nextcloud";
	$appVersion = $OC_VersionString;
	$appLicence = "agpl";
}

$openapi = new OpenApi([
	"openapi" => "3.0.3",
	"info" => new Info([
		"title" => $appName,
		"version" => $appVersion,
		"description" => $appSummary,
		"license" => [
			"name" => $appLicence,
		],
	]),
	"security" => [
		new SecurityRequirement([
			"basic_auth" => [],
		]),
	],
	"components" => [
		"securitySchemes" => [
			"basic_auth" => [
				"type" => "http",
				"scheme" => "basic",
			]
		],
		"schemas" => [],
	],
	"tags" => [
		[
			"name" => $appID,
		]
	],
	"paths" => [],
]);

print_r("Extracting OpenAPI spec for " . $appName . " " . $appVersion . "\n");

$schemas = [];

$definitions = [];
$definitionsPath = join("/", [$dir, "lib", "ResponseDefinitions.php"]);
if (file_exists($definitionsPath)) {
	foreach ($nodeFinder->findInstanceOf(loadAST($definitionsPath), Class_::class) as $node) {
		$doc = $node->getDocComment()?->getText();
		if ($doc != null) {
			$docNodes = $phpDocParser->parse(new TokenIterator($lexer->tokenize($doc)))->children;
			foreach ($docNodes as $docNode) {
				if ($docNode instanceof PhpDocTagNode && $docNode->value instanceof TypeAliasTagValueNode) {
					$definitions[$docNode->value->alias] = resolveOpenApiType($docNode->value->type)->toSchema();
				}
			}
		}
	}
} else {
	print_r("Warning no response definitions were loaded\n");
}

$routes = parseRoutes(join("/", $appIsCore ? [$dir, "routes.php"] : [$dir, "appinfo", "routes.php"]));
$seenRouteNames = [];

if (array_key_exists("routes", $routes) && array_key_exists("ocs", $routes)) {
	$routes = ["ocs" => $routes["ocs"]];
}

foreach ($routes as $key => $value) {
	if ($key != "routes" && $key != "ocs") {
		continue;
	}
	foreach ($value as $route) {
		$routeName = $route["name"];
		if (str_starts_with(strtolower($routeName), "page#") || str_starts_with(strtolower($routeName), "admin#") || in_array($routeName, $seenRouteNames)) {
			continue;
		}
		$seenRouteNames[] = $routeName;

		$verb = array_key_exists("verb", $route) ? $route["verb"] : "GET";
		$requirements = array_key_exists("requirements", $route) ? $route["requirements"] : [];
		$root = array_key_exists("root", $route) ? $route["root"] : ($appIsCore ? "" : "/apps") . "/" . $appID;
		$url = $route["url"];
		if (!str_starts_with($url, "/")) {
			$url = "/" . $url;
		}
		if (str_ends_with($url, "/")) {
			$url = substr($url, 0, -1);
		}
		if ($key == "routes") {
			$url = "/index.php" . $root . $url;
		}
		if ($key == "ocs") {
			$url = "/ocs/v2.php" . $root . $url;
		}

		$methodName = lcfirst(str_replace("_", "", ucwords(explode("#", $routeName)[1], "_")));
		if ($methodName == "preflightedCors") {
			continue;
		}

		$controllerName = ucfirst(str_replace("_", "", ucwords(explode("#", $routeName)[0], "_")));
		$controllerClass = null;
		/** @var Class_ $class */
		foreach ($nodeFinder->findInstanceOf(loadAST(join("/", $appIsCore ? [$dir, "Controller", $controllerName . "Controller.php"] : [$dir, "lib", "Controller", $controllerName . "Controller.php"])), Class_::class) as $class) {
			if ($class->name == $controllerName . "Controller") {
				$controllerClass = $class;
				break;
			}
		}
		if ($controllerClass == null) {
			die("Controller " . $controllerName . " not found\n");
		}
		$methodFunction = null;
		$isOCS = false;
		/** @var ClassMethod $classMethod */
		foreach ($nodeFinder->findInstanceOf($controllerClass->stmts, ClassMethod::class) as $classMethod) {
			if ($classMethod->name == $methodName) {
				$doc = $classMethod->getDocComment()?->getText();
				if ($controllerClass->extends != "Controller" || ($doc != null && str_contains($doc, "@NoCSRFRequired"))) {
					$methodFunction = $classMethod;
					$isOCS = $controllerClass->extends != "Controller";
					break;
				}
			}
		}
		if ($methodFunction == null) {
			print_r("Warning " . $routeName . " is ignored\n");
			continue;
		}

		if ($isOCS && !array_key_exists("OCSMeta", $schemas)) {
			$schemas["OCSMeta"] = [
				"type" => "object",
				"required" => [
					"status",
					"statuscode",
				],
				"properties" => [
					"status" => ["type" => "string"],
					"statuscode" => ["type" => "integer"],
					"message" => ["type" => "string"],
					"totalitems" => ["type" => "string"],
					"itemsperpage" => ["type" => "string"],
				],
			];
		}

		$classMethodInfo = extractMethodInfo($methodFunction, $isOCS);
		if (count($classMethodInfo->returns) > 0) {
			die($routeName . " can not return something that is not a valid response.\n");
		}
		if (count($classMethodInfo->responses) == 0) {
			die($routeName . " does not return any response.\n");
		}

		$codeStatusCodes = [];
		/* @var $returnStatement Return_ */
		foreach ($nodeFinder->findInstanceOf($methodFunction->stmts, Return_::class) as $returnStatement) {
			if ($returnStatement->expr instanceof New_ && $returnStatement->expr->class instanceof Name && in_array($returnStatement->expr->class->getLast(), $responseTypes)) {
				if (count($returnStatement->expr->args) >= 2) {
					$codeStatusCodes[] = statusEnumToCode($returnStatement->expr->args[1]->value->name->name);
				} else {
					$codeStatusCodes[] = 200;
				}
			}
		}

		/* @var $throwStatement Throw_ */
		foreach ($nodeFinder->findInstanceOf($methodFunction->stmts, Throw_::class) as $throwStatement) {
			if ($throwStatement->expr instanceof New_ && $throwStatement->expr->class instanceof Name) {
				$type = $throwStatement->expr->class->getLast();
				$statusCode = exceptionToStatusCode($type);
				if ($statusCode != null) {
					$codeStatusCodes[] = $statusCode;
				}
			}
		}

		$docStatusCodes = array_map(fn(ClassMethodResponse $response) => $response->statusCode, $classMethodInfo->responses);
		$missingDocStatusCodes = array_unique(array_filter(array_diff($codeStatusCodes, $docStatusCodes), fn(int $code) => $code < 500));
		$missingCodeStatusCodes = array_unique(array_diff($docStatusCodes, $codeStatusCodes));

		if (count($missingDocStatusCodes) > 0) {
			print_r("Warning " . $routeName . " returns the following undocumented status codes: " . implode(", ", $missingDocStatusCodes) . "\n");
		}
		if (count($missingCodeStatusCodes) > 0) {
			print_r("Warning " . $routeName . " documents the following status codes which are never returned: " . implode(", ", $missingCodeStatusCodes) . "\n");
		}

		$pathParameters = [];
		$urlParameters = [];

		preg_match_all("/{[^}]*}/", $url, $urlParameters);
		$urlParameters = array_map(fn(string $name) => substr($name, 1, -1), $urlParameters[0]);

		if (!$openapi->paths->hasPath($url)) {
			foreach ($urlParameters as $urlParameter) {
				$matchingParameters = array_filter($classMethodInfo->parameters, function (ClassMethodParameter $param) use ($urlParameter) {
					return $param->name == $urlParameter;
				});
				if (count($matchingParameters) == 1) {
					$parameter = $matchingParameters[array_keys($matchingParameters)[0]];
					if ($parameter?->methodParameter == null && ($requirements == null || !array_key_exists($urlParameter, $requirements))) {
						die("Unable to find parameter for " . $urlParameter . " in " . $routeName . "\n");
					}

					$pathParameters[] = new Parameter(array_merge(
						[
							"name" => $urlParameter,
							"in" => "path",
							"required" => true,
							"schema" => $parameter->type->toSchema(),
						],
						$parameter?->docParameter != null && $parameter->docParameter->description != "" ? ["description" => cleanDocComment($parameter->docParameter->description)] : [],
					));
				} else {
					$requirement = array_key_exists($urlParameter, $requirements) ? $requirements[$urlParameter] : null;
					if ($requirement != null) {
						if (!str_starts_with($requirement, "^")) {
							$requirement = "^" . $requirement;
						}
						if (!str_ends_with($requirement, "$")) {
							$requirement = $requirement . "$";
						}
					}
					$pathParameters[] = new Parameter(array_merge(
						[
							"name" => $urlParameter,
							"in" => "path",
							"required" => true,
							"schema" => array_merge(
								$requirement != null ? [
									"type" => "string",
									"pattern" => $requirement,
								] : [],
							),
						],
					));
				}
			}

			$openapi->paths->addPath(
				$url,
				new PathItem([
					"parameters" => $pathParameters,
				]),
			);
		} else {
			$pathParameters = $openapi->paths->getPath($url)->parameters;
		}

		$queryParameters = [];
		foreach ($classMethodInfo->parameters as $parameter) {
			$alreadyInPath = false;
			foreach ($pathParameters as $pathParameter) {
				if ($pathParameter->name == $parameter->name) {
					$alreadyInPath = true;
					break;
				}
			}
			if (!$alreadyInPath) {
				$queryParameters[] = $parameter;
			}
		}

		$responses = [];
		foreach ($classMethodInfo->responses as $response) {
			if ($firstResponse && count($responses) > 0) {
				break;
			}
			$responses[$response->statusCode] = new Response(
				array_merge(
					[
						"description" => $response->description != null ? $response->description : "",
						"content" => [
							$response->contentType => new MediaType(
								$response->isOCS ? [
									"schema" => [
										"type" => "object",
										"required" => [
											"ocs",
										],
										"properties" => [
											"ocs" => [
												"type" => "object",
												"required" => [
													"meta",
													"data",
												],
												"properties" => [
													"meta" => [
														"\$ref" => "#/components/schemas/OCSMeta",
													],
													"data" => $response->type->toSchema(),
												],
											],
										],
									],
								] : ["schema" => $response->type->toSchema()],
							),
						],
					],
				),
			);
		}

		$operation = new Operation(array_merge([
			"operationId" => generateOperationID($methodName, $controllerName, $appID),
			"tags" => [$appID],
			"responses" => $responses,
			"description" => implode("\n", $classMethodInfo->description),
		],
			$classMethodInfo->summary != null ? ["summary" => $classMethodInfo->summary] : [],
			count($queryParameters) > 0 ? [
				"parameters" => array_map(fn(ClassMethodParameter $parameter) => new Parameter(array_merge(
					[
						"name" => $parameter->name,
						"in" => "query",
						"schema" => $parameter->type->toSchema(true),
					],
					!$parameter->type->nullable && $parameter->type->defaultValue == null ? ["required" => true] : [],
					$parameter->docParameter != null && $parameter->docParameter->description != "" ? ["description" => cleanDocComment($parameter->docParameter->description)] : [],
				)), $queryParameters),
			] : []),
		);
		switch ($verb) {
			case "DELETE":
				$openapi->paths->getPath($url)->delete = $operation;
				break;
			case "GET":
				$openapi->paths->getPath($url)->get = $operation;
				break;
			case "POST":
				$openapi->paths->getPath($url)->post = $operation;
				break;
			case "PUT":
				$openapi->paths->getPath($url)->put = $operation;
				break;
			case "PATCH":
				$openapi->paths->getPath($url)->patch = $operation;
				break;
			case "OPTIONS":
				$openapi->paths->getPath($url)->options = $operation;
				break;
		}
	}
}

ksort($schemas);
$openapi->components->schemas = $schemas;

file_put_contents($out, Writer::writeToJson($openapi, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
if (!$openapi->validate()) {
	die("Invalid OpenAPI spec generated. Please review the output!\n");
}

function extractMethodInfo(ClassMethod $method, bool $isOCS = false): ClassMethodInfo {
	global $phpDocParser, $lexer;

	$parameters = [];
	$responses = [];
	$responseDescriptions = [];
	$returns = [];

	$methodDescription = [];
	$methodSummary = null;
	$methodParameters = $method->getParams();
	$docParameters = [];

	$doc = $method->getDocComment()?->getText();
	if ($doc != null) {
		$docNodes = $phpDocParser->parse(new TokenIterator($lexer->tokenize($doc)))->children;

		foreach ($docNodes as $docNode) {
			if ($docNode instanceof PhpDocTextNode) {
				$block = cleanDocComment($docNode->text);
				if ($block == "") {
					continue;
				}
				$pattern = "/([0-9]{3}): /";
				if (preg_match($pattern, $block)) {
					$parts = preg_split($pattern, $block, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
					for ($i = 0; $i < count($parts); $i += 2) {
						$statusCode = intval($parts[$i]);
						$responseDescriptions[$statusCode] = trim($parts[$i + 1]);
					}
				} else {
					$methodDescription[] = $block;
				}
			}
		}

		foreach ($docNodes as $docNode) {
			if ($docNode instanceof PhpDocTagNode) {
				if ($docNode->value instanceof ParamTagValueNode) {
					$docParameters[] = $docNode->value;
				}

				if ($docNode->value instanceof ReturnTagValueNode) {
					$type = $docNode->value->type;

					resolveReturnType($responses, $returns, $responseDescriptions, $type);
				}

				if ($docNode->value instanceof ThrowsTagValueNode) {
					$type = $docNode->value->type;
					$statusCode = exceptionToStatusCode($type);
					if ($statusCode != null) {
						$responses[$statusCode] = new ClassMethodResponse($statusCode, "text/plain", new OpenApiType(type: "string"), $docNode->value->description, $isOCS);
					}
				}
			}
		}
	}

	foreach ($methodParameters as $methodParameter) {
		$param = null;
		$methodParameterName = $methodParameter->var->name;

		foreach ($docParameters as $docParameter) {
			$docParameterName = substr($docParameter->parameterName, 1);

			if ($docParameterName == $methodParameterName) {
				$param = new ClassMethodParameter($methodParameterName, $methodParameter, $docParameter);
				break;
			}
		}

		if ($param == null) {
			$param = new ClassMethodParameter($methodParameterName, $methodParameter, null);
		}

		$parameters[] = $param;
	}

	if (count($methodDescription) > 1) {
		$methodSummary = $methodDescription[0];
		$methodDescription = array_slice($methodDescription, 1);
	}

	return new ClassMethodInfo($parameters, array_values($responses), $returns, $methodDescription, $methodSummary);
}

function resolveReturnType(&$responses, &$returns, $responseDescriptions, TypeNode $type): void {
	global $responseTypes, $isOCS;
	if ($type instanceof GenericTypeNode && in_array($type->type->name, $responseTypes)) {
		if (count($type->genericTypes) != 2) {
			die($type->type->name . " needs two parameters.\n");
		}
		$statusCodes = [];
		$statusCodeNodes = [];
		if ($type->genericTypes[1] instanceof UnionTypeNode) {
			$statusCodeNodes = $type->genericTypes[1]->types;
		} else {
			$statusCodeNodes[] = $type->genericTypes[1];
		}
		foreach ($statusCodeNodes as $node) {
			$statusCodes[] = statusEnumToCode($node->constExpr->name);
		}
		$realType = resolveOpenApiType($type->genericTypes[0]);
		foreach ($statusCodes as $statusCode) {
			$responses[$statusCode] = new ClassMethodResponse(
				$statusCode,
				"application/json",
				$realType,
				array_key_exists($statusCode, $responseDescriptions) ? $responseDescriptions[$statusCode] : null,
				$isOCS,
			);
		}
	} else if ($type instanceof UnionTypeNode) {
		foreach ($type->types as $subType) {
			resolveReturnType($responses, $returns, $responseDescriptions, $subType);
		}
	} else {
		$returns[] = resolveOpenApiType($type);
	}
}

function statusEnumToCode(string $name) {
	return match ($name) {
		"STATUS_OK" => 200,
		"STATUS_CREATED" => 201,
		"STATUS_ACCEPTED" => 202,
		"STATUS_NO_CONTENT" => 204,
		"STATUS_NOT_MODIFIED" => 304,
		"STATUS_BAD_REQUEST" => 400,
		"STATUS_UNAUTHORIZED" => 401,
		"STATUS_FORBIDDEN" => 403,
		"STATUS_NOT_FOUND" => 404,
		"STATUS_METHOD_NOT_ALLOWED" => 405,
		"STATUS_NOT_ACCEPTABLE" => 406,
		"STATUS_CONFLICT" => 409,
		"STATUS_PRECONDITION_FAILED" => 412,
		"STATUS_REQUEST_ENTITY_TOO_LARGE" => 413,
		"STATUS_INTERNAL_SERVER_ERROR" => 500,
		"STATUS_NOT_IMPLEMENTED" => 501,
		default => die("Unknown status code " . $name . "\n"),
	};
}

function exceptionToStatusCode(string $name): ?int {
	if (!str_starts_with($name, "OCS")) {
		return 500;
	}
	return match ($name) {
		"OCSException" => null,
		"OCSBadRequestException" => 400,
		"OCSForbiddenException" => 403,
		"OCSNotFoundException" => 404,
		default => die("Unknown exception " . $name . "\n"),
	};
}

class ClassMethodInfo {
	/**
	 * @param ClassMethodParameter[] $parameters
	 * @param ClassMethodResponse[] $responses
	 * @param OpenApiType[] $returns
	 * @param string[] $description
	 */
	public function __construct(public array $parameters, public array $responses, public array $returns, public array $description, public ?string $summary) {
	}
}

class ClassMethodResponse {
	public function __construct(public int $statusCode, public string $contentType, public OpenApiType $type, public ?string $description, public bool $isOCS) {
	}

}

class ClassMethodParameter {
	public OpenApiType $type;

	public function __construct(public string $name, public Param $methodParameter, public ?ParamTagValueNode $docParameter) {
		if ($docParameter != null) {
			$this->type = resolveOpenApiType($docParameter);
		} else {
			$this->type = resolveOpenApiType($methodParameter->type);
		}
		if ($methodParameter->default != null) {
			$this->type->defaultValue = exprToString($methodParameter->default);
		}
	}
}

function exprToString(null|Expr $expr): mixed {
	if ($expr == null) {
		return null;
	}
	if ($expr instanceof ConstFetch) {
		$value = $expr->name->getLast();
		switch ($value) {
			case "null":
				return null;
			case "true":
				return true;
			case "false":
				return false;
			default:
				die("Unable to convert ConstFetch " . $value . "\n");
		}
	}
	if ($expr instanceof String_) {
		return $expr->value;
	}
	if ($expr instanceof LNumber) {
		return intval($expr->value);
	}
	if ($expr instanceof UnaryMinus) {
		return exprToString($expr->expr);
	}
	if ($expr instanceof Array_) {
		return array_map(fn(ArrayItem $item) => exprToString($item), $expr->items);
	}

	die("Unable to convert Expr " . get_class($expr) . "\n");
}

function resolveIdentifier(string $name): OpenApiType {
	global $openapi, $definitions, $schemas, $dir;
	return match ($name) {
		"string" => new OpenApiType(type: "string", nullable: false),
		"non-empty-string" => new OpenApiType(type: "string", nullable: false, minLength: 1),
		"int", "integer" => new OpenApiType(type: "integer", nullable: false),
		"bool", "boolean" => new OpenApiType(type: "boolean", nullable: false),
		"double" => new OpenApiType(type: "number", format: "double", nullable: false),
		"float" => new OpenApiType(type: "number", format: "float", nullable: false),
		"array" => new OpenApiType(type: "object", nullable: false, additionalProperties: true),
		"null" => new OpenApiType(nullable: true),
		default => (function () use ($dir, $definitions, &$schemas, $openapi, $name) {
			if (array_key_exists($name, $definitions)) {
				if (!array_key_exists($name, $schemas)) {
					$schemas[$name] = $definitions[$name];
				}
				return new OpenApiType(
					ref: "#/components/schemas/" . $name,
				);
			}
			die("Unable to resolve OpenAPI type for identifier '" . $name . "'\n");
		})(),
	};
}

function resolveOpenApiType(ParamTagValueNode|NodeAbstract|TypeNode $node): OpenApiType {
	if ($node instanceof ParamTagValueNode) {
		$type = resolveOpenApiType($node->type);
		$type->description = $node->description;
		return $type;
	}
	if ($node instanceof PhpParser\Node\Name) {
		return resolveIdentifier($node->getLast());
	}
	if ($node instanceof IdentifierTypeNode || $node instanceof Identifier) {
		return resolveIdentifier($node->name);
	}

	if ($node instanceof ArrayTypeNode) {
		return new OpenApiType(type: "array", nullable: false, items: resolveOpenApiType($node->type));
	}

	if ($node instanceof ArrayShapeNode) {
		if (count($node->items) == 0) {
			die("Use 'array' instead of 'array{}'\n");
		}
		$properties = [];
		$required = [];
		foreach ($node->items as $item) {
			$type = resolveOpenApiType($item->valueType);
			$properties[$item->keyName->name] = $type;
			if (!$type->nullable) {
				$required[] = $item->keyName->name;
			}
		}
		return new OpenApiType(type: "object", nullable: false, properties: $properties, required: count($required) > 0 ? $required : null);
	}

	if ($node instanceof GenericTypeNode && $node->type->name == "array" && count($node->genericTypes) == 2 && $node->genericTypes[0] instanceof IdentifierTypeNode && $node->genericTypes[0]->name == "string") {
		return new OpenApiType(type: "object", additionalProperties: resolveOpenApiType($node->genericTypes[1]));
	}

	if ($node instanceof NullableTypeNode || $node instanceof NullableType) {
		$type = resolveOpenApiType($node->type);
		$type->nullable = true;
		return $type;
	}

	if (($node instanceof UnionTypeNode || $node instanceof UnionType) && count($node->types) == count(array_filter($node->types, fn($type) => $type instanceof ConstTypeNode && $type->constExpr instanceof ConstExprStringNode))) {
		$values = [];
		/** @var ConstTypeNode $type */
		foreach ($node->types as $type) {
			$values[] = $type->constExpr->value;
		}

		return new OpenApiType(type: "string", enum: $values);
	}

	if ($node instanceof UnionTypeNode || $node instanceof IntersectionTypeNode || $node instanceof UnionType || $node instanceof IntersectionType) {
		$nullable = false;
		$types = [];

		foreach ($node->types as $type) {
			if (($type instanceof IdentifierTypeNode || $type instanceof Identifier) && $type->name == "null") {
				$nullable = true;
			} else {
				$types[] = resolveOpenApiType($type);
			}
		}

		if (count($types) == 1) {
			$type = $types[0];
			$type->nullable = true;
			return $type;
		}

		return new OpenApiType(
			nullable: $nullable,
			oneOf: $node instanceof UnionTypeNode || $node instanceof UnionType ? $types : null,
			allOf: $node instanceof IntersectionTypeNode || $node instanceof IntersectionType ? $types : null,
		);
	}

	die("Unable to resolve OpenAPI type for type '" . get_class($node) . "'\n");
}

class OpenApiType {
	/**
	 * @param OpenApiType[]|null $oneOf
	 * @param OpenApiType[]|null $anyOf
	 * @param OpenApiType[]|null $allOf
	 */
	public function __construct(
		public ?string $ref = null,
		public ?string $type = null,
		public ?string $format = null,
		public ?bool $nullable = null,
		public mixed $defaultValue = null,
		public ?OpenApiType $items = null,
		public ?array $properties = null,
		public ?array $oneOf = null,
		public ?array $anyOf = null,
		public ?array $allOf = null,
		public bool|OpenApiType|null $additionalProperties = null,
		public ?array $required = null,
		public ?string $description = null,
		public ?int $minLength = null,
		public ?int $maxLength = null,
		public ?array $enum = null,
	) {
	}

	public function toSchema(bool $isParameter = false): Schema {
		return new Schema(array_merge(
			$this->ref != null ? ["\$ref" => $this->ref] : [],
			$this->type != null ? ["type" => $isParameter && $this->type == "boolean" ? "integer" : $this->type] : [],
			$this->format != null ? ["format" => $this->format] : [],
			$this->defaultValue != null ? ["default" => $isParameter && $this->type == "boolean" ? $this->defaultValue == "true" ? 1 : 0 : $this->defaultValue] : [],
			$this->items != null ? ["items" => $this->items->toSchema($isParameter)] : [],
			$this->properties != null ? ["properties" =>
				array_combine(array_keys($this->properties),
					array_map(function (OpenApiType $property) use ($isParameter) {
						return $property->toSchema($isParameter);
					}, array_values($this->properties)),
				)] : [],
			$this->oneOf != null ? ["oneOf" => array_map(function (OpenApiType $type) use ($isParameter) {
				return $type->toSchema($isParameter);
			}, $this->oneOf)] : [],
			$this->anyOf != null ? ["anyOf" => array_map(function (OpenApiType $type) use ($isParameter) {
				return $type->toSchema($isParameter);
			}, $this->anyOf)] : [],
			$this->allOf != null ? ["allOf" => array_map(function (OpenApiType $type) use ($isParameter) {
				return $type->toSchema($isParameter);
			}, $this->allOf)] : [],
			$this->additionalProperties != null ? [
				"additionalProperties" => $this->additionalProperties instanceof OpenApiType ? $this->additionalProperties->toSchema() : $this->additionalProperties,
			] : [],
			$this->required != null && count($this->required) > 0 ? ["required" => $this->required] : [],
			$this->description != null && $this->description != "" && !$isParameter ? ["description" => $this->description] : [],
			$this->minLength != null && $this->minLength != 0 ? ["minLength" => $this->minLength] : [],
			$this->maxLength != null && $this->maxLength != 0 ? ["maxLength" => $this->maxLength] : [],
			$this->enum != null && count($this->enum) > 0 ? ["enum" => $this->enum] : [],
		));
	}
}

function loadAST(string $filename): array {
	global $astParser;
	return $astParser->parse(file_get_contents($filename));
}

function parseRoutes(string $path): array {
	$content = file_get_contents($path);
	if (str_contains($content, "return ")) {
		return include($path);
	} elseif (str_contains($content, "registerRoutes")) {
		preg_match("/registerRoutes\(\\\$this, (\[[^;]*)\);/", $content, $matches);

		$tmpPath = tempnam(sys_get_temp_dir(), "routes-");
		file_put_contents($tmpPath, "<?php\nreturn " . $matches[1] . ";");
		$routes = include($tmpPath);
		unlink($tmpPath);

		return $routes;
	} else {
		die("Unknown routes.php format\n");
	}
}

function cleanDocComment(string $comment): string {
	return trim(preg_replace("/\s+/", " ", $comment));
}

function splitOnUppercaseFollowedByNonUppercase(string $str): array {
	return preg_split('/(?=[A-Z][^A-Z])/', $str, -1, PREG_SPLIT_NO_EMPTY);
}

function generateOperationID(string $methodName, string $controllerName, string $appId): string {
	$verbParts = array_map(function (string $verbPart) {
		return strtolower($verbPart);
	}, splitOnUppercaseFollowedByNonUppercase($methodName));
	$verb = mapVerb(implode("-", $verbParts));

	$objectParts = array_filter(array_map(function (string $objectPart) {
		return strtolower($objectPart);
	}, splitOnUppercaseFollowedByNonUppercase($controllerName)), function (string $objectPart) {
		return !in_array($objectPart, ["api", "endpoint", "request", "handler"]);
	});
	$object = implode("-", $objectParts);
	$appIdParts = explode("_", $appId);

	if (array_intersect($objectParts, $verbParts) == $objectParts || array_intersect($objectParts, $appIdParts) == $objectParts || $object == "") {
		return $verb;
	}
	if (array_intersect($verbParts, $objectParts) == $verbParts) {
		return $object;
	}

	if (count($verbParts) == 1) {
		// Make it plural when listing
		if ($verb == "list" && !str_ends_with($object, "s")) {
			$object .= "s";
		}

		return "$verb-$object";
	}

	return "$object-$verb";
}

function mapVerb(string $verb): string {
	return match ($verb) {
		"index" => "list",
		default => $verb,
	};
}