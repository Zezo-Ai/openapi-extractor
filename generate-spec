#!/usr/bin/env php
<?php

require_once __DIR__ . "/vendor/autoload.php";

use Ahc\Cli\Input\Command;
use cebe\openapi\spec\Header;
use cebe\openapi\spec\Info;
use cebe\openapi\spec\MediaType;
use cebe\openapi\spec\OpenApi;
use cebe\openapi\spec\Operation;
use cebe\openapi\spec\Parameter;
use cebe\openapi\spec\PathItem;
use cebe\openapi\spec\Response;
use cebe\openapi\spec\Schema;
use cebe\openapi\spec\Tag;
use cebe\openapi\Writer;
use OpenAPIExtractor\ControllerMethodParameter;
use OpenAPIExtractor\ControllerMethodResponse;
use OpenAPIExtractor\OpenApiType;
use OpenAPIExtractor\Route;
use PhpParser\Node\Expr\New_;
use PhpParser\Node\Name;
use PhpParser\Node\Stmt\Class_;
use PhpParser\Node\Stmt\ClassMethod;
use PhpParser\Node\Stmt\Throw_;
use PhpParser\NodeFinder;
use PhpParser\ParserFactory;
use PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode;
use PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasTagValueNode;
use PHPStan\PhpDocParser\Lexer\Lexer;
use PHPStan\PhpDocParser\Parser\ConstExprParser;
use PHPStan\PhpDocParser\Parser\PhpDocParser;
use PHPStan\PhpDocParser\Parser\TokenIterator;
use PHPStan\PhpDocParser\Parser\TypeParser;
use function OpenAPIExtractor\classMethodHasAnnotationOrAttribute;
use function OpenAPIExtractor\cleanDocComment;
use function OpenAPIExtractor\exceptionToStatusCode;
use function OpenAPIExtractor\extractControllerMethod;
use function OpenAPIExtractor\generateReadableAppID;
use function OpenAPIExtractor\jsonFlags;
use function OpenAPIExtractor\license;
use function OpenAPIExtractor\mapVerb;
use function OpenAPIExtractor\mergeCapabilities;
use function OpenAPIExtractor\parseRoutes;
use function OpenAPIExtractor\resolveOpenApiType;
use function OpenAPIExtractor\securitySchemes;
use function OpenAPIExtractor\splitOnUppercaseFollowedByNonUppercase;
use function OpenAPIExtractor\wrapOCSResponse;

$command = new Command("generate-spec", "Extract OpenAPI specs from the Nextcloud source code");
$command
	->arguments("dir out")
	->option('--first-status-code', 'Only output the first status code')
	->option('--first-content-type', 'Only output the first content type')
	->option('--allow-missing-docs', 'Allow missing documentation fields')
	->option('--no-tags', 'Use no tags')
	->option('--openapi-version', 'OpenAPI version to use', null, '3.0.3')
	->parse($_SERVER["argv"]);

$dir = $command->dir ?? "";
$out = $command->out ?? "";
$firstStatusCode = $command->firstStatusCode ?? false;
$firstContentType = $command->firstContentType ?? false;
$allowMissingDocs = $command->allowMissingDocs ?? false;
$useTags = $command->tags ?? true;
$openapiVersion = $command->openapiVersion ?? '3.0.3';

if ($dir == "") {
	$dir = ".";
}
if ($out == "") {
	$out = "openapi.json";
}

$astParser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);
$nodeFinder = new NodeFinder;

$lexer = new Lexer();
$constExprParser = new ConstExprParser();
$typeParser = new TypeParser($constExprParser);
$phpDocParser = new PhpDocParser($typeParser, $constExprParser);

$infoXMLPath = $dir . "/appinfo/info.xml";

if (file_exists($infoXMLPath)) {
	$xml = simplexml_load_file($infoXMLPath);

	$appIsCore = false;
	$appID = (string)$xml->id;
	$appSummary = (string)$xml->summary;
	$appVersion = (string)$xml->version;
	$appLicence = (string)$xml->licence;
} else {
	$versionPHPPath = $dir . "/../version.php";

	if (!file_exists($versionPHPPath)) {
		throw new Exception("Neither " . $infoXMLPath . " nor " . $versionPHPPath . " exists");
	}

	// Includes https://github.com/nextcloud/server/blob/master/version.php when running inside https://github.com/nextcloud/server/tree/master/core
	include($versionPHPPath);
	if (!isset($OC_VersionString)) {
		throw new Exception("Unable to figure out core version");
	}

	$appIsCore = true;
	$appID = "core";
	$appSummary = "Core functionality of Nextcloud";
	$appVersion = $OC_VersionString;
	$appLicence = "agpl";
}

$readableAppID = generateReadableAppID($appID);
$sourceDir = $appIsCore ? $dir : $dir . "/lib";
$appinfoDir = $appIsCore ? $dir : $dir . "/appinfo";

$openapi = new OpenApi([
	"openapi" => $openapiVersion,
	"info" => new Info([
		"title" => $appID,
		"version" => $appVersion,
		"description" => $appSummary,
		"license" => license($openapiVersion, $appLicence),
	]),
	"components" => [
		"securitySchemes" => securitySchemes(),
		"schemas" => [],
	],
	"paths" => [],
]);

print_r("Extracting OpenAPI spec for " . $appID . " " . $appVersion . "\n");

$schemas = [];
$tags = [];

$definitions = [];
$definitionsPath = $sourceDir . "/ResponseDefinitions.php";
if (file_exists($definitionsPath)) {
	foreach ($nodeFinder->findInstanceOf(loadAST($definitionsPath), Class_::class) as $node) {
		$doc = $node->getDocComment()?->getText();
		if ($doc != null) {
			$docNodes = $phpDocParser->parse(new TokenIterator($lexer->tokenize($doc)))->children;
			foreach ($docNodes as $docNode) {
				if ($docNode instanceof PhpDocTagNode && $docNode->value instanceof TypeAliasTagValueNode) {
					if (!str_starts_with($docNode->value->alias, $readableAppID)) {
						throw new Exception("Type alias '" . $docNode->value->alias . "' has to start with '" . $readableAppID . "'");
					}
					$definitions[$docNode->value->alias] = $docNode->value->type;
				}
			}
		}
	}
	foreach (array_keys($definitions) as $name) {
		$schemas[cleanSchemaName($name)] = resolveOpenApiType("Response definitions", $definitions, $definitions[$name])->toSchema();
	}
} else {
	print_r("No response definitions were loaded\n");
}

$capabilities = null;
$publicCapabilities = null;
$iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($sourceDir));
foreach ($iterator as $file) {
	$path = $file->getPathname();
	if (!str_ends_with($path, ".php")) {
		continue;
	}
	/**
	 * @var $node Class_
	 */
	foreach ($nodeFinder->findInstanceOf(loadAST($path), Class_::class) as $node) {
		$implementsCapability = count(array_filter($node->implements, fn(Name $name) => $name->getLast() == "ICapability")) > 0;
		$implementsPublicCapability = count(array_filter($node->implements, fn(Name $name) => $name->getLast() == "IPublicCapability")) > 0;
		if (!$implementsCapability && !$implementsPublicCapability) {
			continue;
		}

		$capabilitiesMethod = null;
		/** @var ClassMethod $classMethod */
		foreach ($nodeFinder->findInstanceOf($node->stmts, ClassMethod::class) as $classMethod) {
			if ($classMethod->name == "getCapabilities") {
				$capabilitiesMethod = $classMethod;
				break;
			}
		}
		if ($capabilitiesMethod == null) {
			throw new Exception($path . ": Unable to read capabilities method");
		}

		$doc = $capabilitiesMethod->getDocComment()?->getText();
		if ($doc == null) {
			throw new Exception($path . ": Unable to read capabilities docs");
		}

		$type = null;
		$docNodes = $phpDocParser->parse(new TokenIterator($lexer->tokenize($doc)))->children;
		foreach ($docNodes as $docNode) {
			if ($docNode instanceof PhpDocTagNode && $docNode->value instanceof ReturnTagValueNode) {
				$type = resolveOpenApiType($path, $definitions, $docNode->value->type);
				break;
			}
		}
		if ($type == null) {
			throw new Exception($path . ": No return value");
		}

		$schema = $type->toSchema();
		if ($schema->type != "object" || $schema->properties == null || count($schema->properties) == 0) {
			throw new Exception($path . ": Invalid capabilities");
		}

		if ($implementsPublicCapability) {
			$publicCapabilities = $publicCapabilities == null ? $schema : mergeCapabilities($path, [$publicCapabilities, $schema]);
		} else {
			$capabilities = $capabilities == null ? $schema : mergeCapabilities($path, [$capabilities, $schema]);
		}
	}
}
if ($capabilities != null) {
	$schemas["Capabilities"] = $capabilities;
}
if ($publicCapabilities != null) {
	$schemas["PublicCapabilities"] = $publicCapabilities;
}
if ($capabilities == null && $publicCapabilities == null) {
	print_r("No capabilities were loaded\n");
}

$parsedRoutes = parseRoutes($appinfoDir . "/routes.php");

$routes = [];
foreach ($parsedRoutes as $key => $value) {
	if ($key != "routes" && $key != "ocs") {
		continue;
	}
	foreach ($value as $route) {
		$routeName = $route["name"];

		$postfix = array_key_exists("postfix", $route) ? $route["postfix"] : null;
		$verb = array_key_exists("verb", $route) ? $route["verb"] : "GET";
		$requirements = array_key_exists("requirements", $route) ? $route["requirements"] : [];
		$root = array_key_exists("root", $route) ? $route["root"] : ($appIsCore ? "" : "/apps") . "/" . $appID;
		$url = $route["url"];
		if (!str_starts_with($url, "/")) {
			$url = "/" . $url;
		}
		if (str_ends_with($url, "/")) {
			$url = substr($url, 0, -1);
		}
		if ($key == "routes") {
			$url = "/index.php" . $root . $url;
		}
		if ($key == "ocs") {
			$url = "/ocs/v2.php" . $root . $url;
		}

		$methodName = lcfirst(str_replace("_", "", ucwords(explode("#", $routeName)[1], "_")));
		if ($methodName == "preflightedCors") {
			continue;
		}

		$controllerName = ucfirst(str_replace("_", "", ucwords(explode("#", $routeName)[0], "_")));
		$controllerClass = null;
		/** @var Class_ $class */
		foreach ($nodeFinder->findInstanceOf(loadAST($sourceDir . "/Controller/" . $controllerName . "Controller.php"), Class_::class) as $class) {
			if ($class->name == $controllerName . "Controller") {
				$controllerClass = $class;
				break;
			}
		}
		if ($controllerClass == null) {
			throw new Exception($routeName . ": Controller '" . $controllerName . "' not found");
		}

		$tagName = implode("_", array_map(fn(string $s) => strtolower($s), splitOnUppercaseFollowedByNonUppercase($controllerName)));
		$doc = $controllerClass->getDocComment()?->getText();
		if ($doc != null && count(array_filter($tags, fn(Tag $tag) => $tag->name == $tagName)) == 0) {
			$classDescription = [];

			$docNodes = $phpDocParser->parse(new TokenIterator($lexer->tokenize($doc)))->children;
			foreach ($docNodes as $docNode) {
				if ($docNode instanceof PhpDocTextNode) {
					$block = cleanDocComment($docNode->text);
					if ($block == "") {
						continue;
					}
					$classDescription[] = $block;
				}
			}

			if (count($classDescription) > 0) {
				$tags[] = new Tag([
					"name" => $tagName,
					"description" => join("\n", $classDescription),
				]);
			}
		}

		$methodFunction = null;
		$isOCS = false;
		$isCORS = false;
		$isPublic = false;
		$isAdmin = true;
		$isDeprecated = false;
		$isIgnored = false;
		/** @var ClassMethod $classMethod */
		foreach ($nodeFinder->findInstanceOf($controllerClass->stmts, ClassMethod::class) as $classMethod) {
			if ($classMethod->name == $methodName) {
				$doc = $classMethod->getDocComment()?->getText();
				$isCSRFRequired = !classMethodHasAnnotationOrAttribute($classMethod, "NoCSRFRequired");
				if ($controllerClass->extends != "Controller" || ($doc != null && !$isCSRFRequired)) {
					$methodFunction = $classMethod;
					$isOCS = $controllerClass->extends != "Controller" && $controllerClass->extends != "ApiController";
					$isCORS = classMethodHasAnnotationOrAttribute($classMethod, "CORS");
					$isPublic = classMethodHasAnnotationOrAttribute($classMethod, "PublicPage");
					$isAdmin = !classMethodHasAnnotationOrAttribute($classMethod, "NoAdminRequired") && !$isPublic;
					$isDeprecated = classMethodHasAnnotationOrAttribute($classMethod, "deprecated");
					$isIgnored = classMethodHasAnnotationOrAttribute($classMethod, "IgnoreAPI");
					break;
				}
			}
		}
		if ($methodFunction == null || $isIgnored) {
			if (!$isIgnored) {
				print_r($routeName . ": Route ignored\n");
			}
			continue;
		}

		if ($isOCS && !array_key_exists("OCSMeta", $schemas)) {
			$schemas["OCSMeta"] = [
				"type" => "object",
				"required" => [
					"status",
					"statuscode",
				],
				"properties" => [
					"status" => ["type" => "string"],
					"statuscode" => ["type" => "integer"],
					"message" => ["type" => "string"],
					"totalitems" => ["type" => "string"],
					"itemsperpage" => ["type" => "string"],
				],
			];
		}

		$classMethodInfo = extractControllerMethod($routeName, $definitions, $methodFunction, $isAdmin, $isDeprecated);
		if (count($classMethodInfo->returns) > 0) {
			throw new Exception($routeName . ": Returns an invalid response");
		}
		if (count($classMethodInfo->responses) == 0) {
			throw new Exception($routeName . ": Returns no responses");
		}

		$codeStatusCodes = [];
		/* @var $throwStatement Throw_ */
		foreach ($nodeFinder->findInstanceOf($methodFunction->stmts, Throw_::class) as $throwStatement) {
			if ($throwStatement->expr instanceof New_ && $throwStatement->expr->class instanceof Name) {
				$type = $throwStatement->expr->class->getLast();
				$statusCode = exceptionToStatusCode($routeName, $type);
				if ($statusCode != null) {
					$codeStatusCodes[] = $statusCode;
				}
			}
		}

		$docStatusCodes = array_map(fn(ControllerMethodResponse $response) => $response->statusCode, array_filter($classMethodInfo->responses, fn(?ControllerMethodResponse $response) => $response != null));
		$missingDocStatusCodes = array_unique(array_filter(array_diff($codeStatusCodes, $docStatusCodes), fn(int $code) => $code < 500));

		if (count($missingDocStatusCodes) > 0) {
			throw new Exception($routeName . ": Returns undocumented status codes: " . implode(", ", $missingDocStatusCodes) . "\n");
		}

		$routes[] = new Route(
			$routeName,
			$tagName,
			$controllerName,
			$methodName,
			$postfix,
			$verb,
			$url,
			$requirements,
			$classMethodInfo,
			$isOCS,
			$isCORS,
			$isPublic,
		);
	}
}

$tagNames = [];
if ($useTags) {
	foreach ($routes as $route) {
		if (!in_array($route->tag, $tagNames)) {
			$tagNames[] = $route->tag;
		}
	}
}

foreach ($routes as $route) {
	$pathParameters = [];
	$urlParameters = [];

	preg_match_all("/{[^}]*}/", $route->url, $urlParameters);
	$urlParameters = array_map(fn(string $name) => substr($name, 1, -1), $urlParameters[0]);

	foreach ($urlParameters as $urlParameter) {
		$matchingParameters = array_filter($route->controllerMethod->parameters, function (ControllerMethodParameter $param) use ($urlParameter) {
			return $param->name == $urlParameter;
		});
		$requirement = array_key_exists($urlParameter, $route->requirements) ? $route->requirements[$urlParameter] : null;
		if (count($matchingParameters) == 1) {
			$parameter = $matchingParameters[array_keys($matchingParameters)[0]];
			if ($parameter?->methodParameter == null && ($route->requirements == null || !array_key_exists($urlParameter, $route->requirements))) {
				throw new Exception($route->name . ": Unable to find parameter for '" . $urlParameter . "'");
			}

			$schema = $parameter->type->toArray(true);
			$description = $parameter?->docParameter != null && $parameter->docParameter->description != "" ? cleanDocComment($parameter->docParameter->description) : null;
		} else {
			$schema = [
				"type" => "string",
			];
			$description = null;
		}

		if ($requirement != null) {
			if (!str_starts_with($requirement, "^")) {
				$requirement = "^" . $requirement;
			}
			if (!str_ends_with($requirement, "$")) {
				$requirement = $requirement . "$";
			}
		}

		if ($schema["type"] == "string") {
			if ($urlParameter == "apiVersion") {
				if ($requirement == null) {
					throw new Exception($route->name . ": Missing requirement for apiVersion");
				}
				preg_match("/^\^\(([v0-9.|]*)\)\\$$/m", $requirement, $multipleMatches);
				preg_match("/^\^([v0-9.]*)\\$$/m", $requirement, $singleMatches);
				if (count($multipleMatches) == 2) {
					$enum = explode("|", $multipleMatches[1]);
				} else if (count($singleMatches) == 2) {
					$enum = [$singleMatches[1]];
				} else {
					throw new Exception($route->name . ": Invalid requirement for apiVersion");
				}
				$schema["enum"] = $enum;
				$schema["default"] = end($enum);
			} else if ($requirement != null) {
				$schema["pattern"] = $requirement;
			}
		}

		$pathParameters[] = new Parameter(array_merge(
			[
				"name" => $urlParameter,
				"in" => "path",
				"required" => true,
				"schema" => $schema,
			],
			$description != null ? ["description" => $description] : [],
		));
	}

	$queryParameters = [];
	foreach ($route->controllerMethod->parameters as $parameter) {
		$alreadyInPath = false;
		foreach ($pathParameters as $pathParameter) {
			if ($pathParameter->name == $parameter->name) {
				$alreadyInPath = true;
				break;
			}
		}
		if (!$alreadyInPath) {
			$queryParameters[] = $parameter;
		}
	}

	$mergedResponses = [];
	foreach (array_unique(array_map(fn(ControllerMethodResponse $response) => $response->statusCode, array_filter($route->controllerMethod->responses, fn(?ControllerMethodResponse $response) => $response != null))) as $statusCode) {
		if ($firstStatusCode && count($mergedResponses) > 0) {
			break;
		}

		$statusCodeResponses = array_filter($route->controllerMethod->responses, fn(?ControllerMethodResponse $response) => $response != null && $response->statusCode == $statusCode);
		$headers = array_merge(...array_map(fn(ControllerMethodResponse $response) => $response->headers ?? [], $statusCodeResponses));

		$mergedContentTypeResponses = [];
		foreach (array_unique(array_map(fn(ControllerMethodResponse $response) => $response->contentType, array_filter($statusCodeResponses, fn(ControllerMethodResponse $response) => $response->contentType != null))) as $contentType) {
			if ($firstContentType && count($mergedContentTypeResponses) > 0) {
				break;
			}

			$contentTypeResponses = array_values(array_filter($statusCodeResponses, fn(ControllerMethodResponse $response) => $response->contentType == $contentType));

			$hasEmpty = count(array_filter($contentTypeResponses, fn(ControllerMethodResponse $response) => $response->type == null)) > 0;
			$uniqueResponses = array_values(array_intersect_key($contentTypeResponses, array_unique(array_map(fn(ControllerMethodResponse $response) => $response->type->toSchema(), array_filter($contentTypeResponses, fn(ControllerMethodResponse $response) => $response->type != null)), SORT_REGULAR)));
			if (count($uniqueResponses) == 1) {
				if ($hasEmpty) {
					$mergedContentTypeResponses[$contentType] = new MediaType([]);
				} else {
					$schema = $contentTypeResponses[0]->type->toSchema();
					$mergedContentTypeResponses[$contentType] = new MediaType(["schema" => $route->isOCS ? wrapOCSResponse($schema) : $schema]);
				}
			} else {
				$mergedContentTypeResponses[$contentType] = new MediaType([
					"schema" => [
						$hasEmpty ? "anyOf" : "oneOf" => array_map(fn(ControllerMethodResponse $response) => $response->type->toSchema(), $uniqueResponses),
					],
				]);
			}
		}

		$mergedResponses[$statusCode] = new Response(
			array_merge(
				[
					"description" => array_key_exists($statusCode, $route->controllerMethod->responseDescription) ? $route->controllerMethod->responseDescription[$statusCode] : "",
				],
				count($mergedContentTypeResponses) > 0 ? [
					"content" => $mergedContentTypeResponses,
				] : [],
				count($headers) > 0 ? [
					"headers" => array_combine(
						array_keys($headers),
						array_map(
							fn(OpenApiType $type) => new Header([
								"schema" => $type->toSchema(),
							]),
							array_values($headers),
						),
					),
				] : [],
			),
		);
	}

	$operationId = [$route->tag];
	$operationId = array_merge($operationId, array_map(fn(string $s) => mapVerb(strtolower($s)), splitOnUppercaseFollowedByNonUppercase($route->methodName)));
	if ($route->postfix != null) {
		$operationId[] = $route->postfix;
	}

	$security = [];
	if ($route->isPublic) {
		// Add empty authentication, meaning that it's optional. We can't know if there is a difference in behaviour for authenticated vs. unauthenticated access on public pages (e.g. capabilities)
		$security[] = [];
	}
	if (!$route->isCORS) {
		// Bearer auth is not allowed on CORS routes
		$security[] = ["bearer_auth" => []];
	}
	// Add basic auth last, so it's only fallback if bearer is available
	$security[] = ["basic_auth" => []];

	$operation = new Operation(array_merge([
		"operationId" => implode("-", $operationId),
		"responses" => $mergedResponses,
	],
		count($security) > 0 ? ["security" => $security] : [],
		$useTags ? ["tags" => [$route->tag]] : [],
		$route->controllerMethod->summary != null ? ["summary" => $route->controllerMethod->summary] : [],
		count($route->controllerMethod->description) > 0 ? ["description" => implode("\n", $route->controllerMethod->description)] : [],
		$route->controllerMethod->isDeprecated ? ["deprecated" => true] : [],
		count($queryParameters) > 0 || count($pathParameters) > 0 || $route->isOCS ? [
			"parameters" => array_merge(
				array_map(fn(ControllerMethodParameter $parameter) => new Parameter(array_merge(
					[
						"name" => $parameter->name,
						"in" => "query",
						"schema" => $parameter->type->toSchema(true),
					],
					!$parameter->type->nullable && !$parameter->type->hasDefaultValue ? ["required" => true] : [],
					$parameter->docParameter != null && $parameter->docParameter->description != "" ? ["description" => cleanDocComment($parameter->docParameter->description)] : [],
				)), $queryParameters),
				$pathParameters,
				$route->isOCS ? [[
					"name" => "OCS-APIRequest",
					"in" => "header",
					"required" => true,
					"schema" => [
						"type" => "string",
						"default" => "true",
					],
				]] : [],
			),
		] : []),
	);
	if (!$openapi->paths->hasPath($route->url)) {
		$openapi->paths->addPath(
			$route->url,
			new PathItem([]),
		);
	}
	$path = $openapi->paths->getPath($route->url);
	$alreadyDefined = false;
	switch ($route->verb) {
		case "DELETE":
			if ($path->delete == null) {
				$path->delete = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
		case "GET":
			if ($path->get == null) {
				$path->get = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
		case "POST":
			if ($path->post == null) {
				$path->post = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
		case "PUT":
			if ($path->put == null) {
				$path->put = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
		case "PATCH":
			if ($path->patch == null) {
				$path->patch = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
		case "OPTIONS":
			if ($path->options == null) {
				$path->options = $operation;
			} else {
				$alreadyDefined = true;
			}
			break;
	}
	if ($alreadyDefined) {
		throw new Exception($route->name . ": Operation '" . $route->verb . "' already set for path '" . $route->url . "'");
	}
}

if ($appIsCore) {
	$schemas["Status"] = new Schema([
		"type" => "object",
		"required" => [
			"installed",
			"maintenance",
			"needsDbUpgrade",
			"version",
			"versionstring",
			"edition",
			"productname",
			"extendedSupport"
		],
		"properties" => [
			"installed" => new Schema([
				"type" => "boolean",
			]),
			"maintenance" => new Schema([
				"type" => "boolean",
			]),
			"needsDbUpgrade" => new Schema([
				"type" => "boolean",
			]),
			"version" => new Schema([
				"type" => "string",
			]),
			"versionstring" => new Schema([
				"type" => "string",
			]),
			"edition" => new Schema([
				"type" => "string",
			]),
			"productname" => new Schema([
				"type" => "string",
			]),
			"extendedSupport" => new Schema([
				"type" => "boolean",
			]),
		],
	]);
	$openapi->paths->addPath("/status.php", new PathItem([
		"get" => new Operation([
			"operationId" => "get-status",
			"responses" => [
				200 => new Response([
					"description" => "Status returned",
					"content" => [
						"application/json" => new MediaType([
							"schema" => new Schema([
								"\$ref" => "#/components/schemas/Status"
							]),
						]),
					],
				]),
			],
		]),
	]));
}

ksort($schemas);
$openapi->components->schemas = $schemas;

if ($useTags) {
	$openapi->tags = $tags;
}

file_put_contents($out, Writer::writeToJson($openapi, jsonFlags()));
if (!$openapi->validate()) {
	$errors = array_filter($openapi->getErrors(), fn(string $error) => !str_contains($error, "Unsupported openapi version"));
	if (count($errors) != 0) {
		print_r(implode("\n", array_map(fn(string $error) => "Error: " . $error, $errors)) . "\n");
		throw new Exception("Invalid OpenAPI spec generated. Please review the output!");
	}
}

function cleanSchemaName(string $name): string {
	global $readableAppID;
	return substr($name, strlen($readableAppID));
}

function loadAST(string $filename): array {
	global $astParser;
	return $astParser->parse(file_get_contents($filename));
}
