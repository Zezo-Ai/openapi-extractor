#!/usr/bin/env php
<?php

require_once __DIR__ . "/vendor/autoload.php";

use Ahc\Cli\Input\Command;
use function OpenAPIExtractor\generateReadableAppID;
use function OpenAPIExtractor\jsonFlags;

$command = new Command("merge-specs", "Merge multiple Nextcloud OpenAPI specs into one");
$command
	->option("--merged <merged>")
	->option("--core <core>")
	->argument("<[specs...]>")
	->parse($_SERVER["argv"]);

/**
 * @var $mergedSpecPath string
 */
$mergedSpecPath = $command->values()["<merged>"];
/**
 * @var $coreSpecPath string
 */
$coreSpecPath = $command->values()["<core>"];
/**
 * @var $otherSpecPaths string[]
 */
$otherSpecPaths = $command->specs;

$coreSpec = loadSpec($coreSpecPath);

$capabilities = collectCapabilities($coreSpec);

$data = [
	"openapi" => "3.0.3",
	"info" => [
		"title" => "nextcloud",
		"description" => "Nextcloud APIs",
		"license" => [
			"name" => "agpl",
		],
		"version" => "0.0.1",
	],
	"security" => [
		[
			"basic_auth" => [],
		]
	],
	"tags" => rewriteTags($coreSpec),
	"components" => [
		"securitySchemes" => [
			"basic_auth" => [
				"type" => "http",
				"scheme" => "basic",
			],
		],
		"schemas" => rewriteSchemaNames($coreSpec),
	],
	"paths" => rewriteOperations($coreSpec),
];

foreach ($otherSpecPaths as $specPath) {
	$spec = loadSpec($specPath);
	$data["components"]["schemas"] = array_merge($data["components"]["schemas"], rewriteSchemaNames($spec));
	$data["tags"] = array_merge($data["tags"], rewriteTags($spec));
	$data["paths"] = array_merge($data["paths"], rewriteOperations($spec));
	$capabilities = array_merge_recursive($capabilities, collectCapabilities($spec));
}

$data
["paths"]
["/ocs/v2.php/cloud/capabilities"]
["get"]
["responses"]
["200"]
["content"]
["application/json"]
["schema"]
["properties"]
["ocs"]
["properties"]
["data"]
["properties"]
["capabilities"]
["properties"]
	= $capabilities;

function loadSpec(string $path): array {
	return rewriteRefs(json_decode(file_get_contents($path), true));
}

function rewriteRefs(array $spec): array {
	$readableAppID = generateReadableAppID($spec["info"]["title"]);
	array_walk_recursive($spec, function (&$item, $key) use ($readableAppID) {
		if ($key == "\$ref" && $item != "#/components/schemas/OCSMeta") {
			$item = str_replace("#/components/schemas/", "#/components/schemas/" . $readableAppID, $item);
		}
	});
	return $spec;
}

function collectCapabilities(array $spec): array {
	$capabilities = [];
	foreach ($spec["components"]["schemas"] as $name => $schema) {
		if ($name == "Capabilities" || $name == "PublicCapabilities") {
			$capabilities = array_merge_recursive($capabilities, $schema["properties"]);
			unset($spec["components"]["schemas"][$name]);
		}
	}

	return $capabilities;
}

function rewriteSchemaNames(array $spec): array {
	$schemas = $spec["components"]["schemas"];
	$readableAppID = generateReadableAppID($spec["info"]["title"]);
	return array_combine(
		array_map(fn(string $key) => $key == "OCSMeta" ? $key : $readableAppID . $key, array_keys($schemas)),
		array_values($schemas),
	);
}

function rewriteTags(array $spec): array {
	return array_map(function (array $tag) use ($spec) {
		$tag["name"] = $spec["info"]["title"] . "/" . $tag["name"];
		return $tag;
	}, $spec["tags"]);
}

function rewriteOperations(array $spec): array {
	foreach (array_keys($spec["paths"]) as $path) {
		foreach (array_keys($spec["paths"][$path]) as $method) {
			if (!in_array($method, ["delete", "get", "post", "put", "patch", "options"])) {
				continue;
			}
			$operation = &$spec["paths"][$path][$method];
			if (array_key_exists("operationId", $operation)) {
				$operation["operationId"] = $spec["info"]["title"] . "-" . $operation["operationId"];
			}
			if (array_key_exists("tags", $operation)) {
				$operation["tags"] = array_map(fn(string $tag) => $spec["info"]["title"] . "/" . $tag, $operation["tags"]);
			} else {
				$operation["tags"] = [$spec["info"]["title"]];
			}
		}
	}
	return $spec["paths"];
}

file_put_contents($mergedSpecPath, json_encode($data, jsonFlags()));